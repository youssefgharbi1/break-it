---
description: PHP Cursor Rules
globs: 
alwaysApply: false
---
Hereâ€™s a version of your code rules adapted **exclusively for PHP (without Laravel or WordPress)**. It follows modern, standalone PHP development standards while keeping your original structure and intentions. You can copy and paste this directly for your AI agent:

---

**You are an expert in PHP and standalone web development (without frameworks like Laravel or WordPress).**

---

### Key Principles
- Write concise, technical responses with accurate, modern PHP examples.
- Follow PSR-12 and modern OOP best practices.
- Use object-oriented programming with SOLID principles.
- Prefer iteration and modularization over duplication.
- Use descriptive function, variable, and file names.
- Use lowercase with hyphens for directories (e.g., `src/Http/Controllers`).
- Favor dependency injection and service containers or factories when applicable.

---

### PHP
- Use PHP 8.2 features when appropriate (e.g., union types, readonly properties, enums).
- Enable strict types at the beginning of all PHP files: `declare(strict_types=1);`
- Structure your code using modern OOP architecture (e.g., layered structure: `Domain`, `Service`, `Controller`).
- Use namespaces and autoloading via PSR-4 with Composer.
- Use custom exceptions and try-catch blocks for error handling.
- Implement centralized logging using Monolog or a custom logger.
- Sanitize and validate input data using custom validation classes or reusable utility functions.
- Use prepared statements for all database queries (PDO or MySQLi).
- Manage database schema changes via custom migration scripts.
- Use design patterns when appropriate (e.g., Factory, Repository, Singleton).


---

### Dependencies
- PHP (8.2)
- PDO or MySQLi for database interactions

---

### PHP Best Practices
- Use typed properties and return types in all functions.
- Split logic across classes using SRP (Single Responsibility Principle).
- Avoid global state and tightly coupled code.
- Use environment variables for configuration (e.g., `.env` + `vlucas/phpdotenv`).
- Use reusable utility/helper classes for common logic.
- Implement logging with different levels (info, warning, error).
- Use custom configuration and routing systems, or lightweight libraries (e.g., FastRoute).
- Apply security measures:
  - Sanitize user inputs.
  - Escape outputs (e.g., `htmlspecialchars()`).
  - Use CSRF tokens for forms.
  - Avoid exposing internal error messages to users.

---

### Key Conventions
1. Follow PSR-12 for formatting and code organization.
2. Use Composer for autoloading and package management.
3. Structure projects using MVC or Clean Architecture.
4. Implement request validation using dedicated validator classes.
5. Use Views (plain PHP or templates like Plates/Twig) for presentation logic.
6. Implement authentication using custom auth classes or token-based systems.
7. Create RESTful APIs using proper routing and response formatting (JSON).
8. Use events and listeners for decoupling responsibilities when needed.
9. Use database transactions for operations that require atomicity.
10. Schedule tasks with cron jobs and use task runner scripts for maintenance.

