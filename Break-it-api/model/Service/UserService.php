<?php
namespace App\model\Service;

use App\model\Repository\UserRepository;
use App\Model\User;
use InvalidArgumentException;

class UserService
{
    private $userRepository;

    public function __construct(UserRepository $userRepository)
    {
        $this->userRepository = $userRepository;
    }

    /**
     * Create a new user with validation
     */
    public function createUser(array $userData): User
    {
        $this->validateUserData($userData);

        $user = new User(
            0, // ID will be generated by database
            $userData['email'],
            $userData['first_name'],
            $userData['last_name'],
            password_hash($userData['password'], PASSWORD_BCRYPT),
            $userData['phone'] ?? null,
            $userData['age'] ?? null,
            $userData['gender'] ?? null,
            $userData['role'] ?? ''
        );

        return $this->userRepository->create($user);
    }

    /**
     * Get user by email
     */
    public function getUserByEmail(string $email): ?User
    {
        return $this->userRepository->findByEmail($email);
    }

    /**
     * Verify user credentials
     */
    public function verifyCredentials(string $email, string $password): ? User
    {
        $user = $this->getUserByEmail($email);
        return ($user && password_verify($password, $user->getPassword())) ? $user : null;
    }

    /**
     * Update user profile information
     */
    public function updateProfile(int $userId, array $updateData): User
    {
        $user = $this->userRepository->findById($userId);
        if (!$user) {
            throw new InvalidArgumentException("User not found");
        }

        $this->validateProfileData($updateData);

        // Update allowed fields
        if (isset($updateData['first_name'])) {
            $user->setFirstName($updateData['first_name']);
        }
        if (isset($updateData['last_name'])) {
            $user->setLastName($updateData['last_name']);
        }
        if (isset($updateData['phone'])) {
            $user->setPhone($updateData['phone']);
        }
        if (isset($updateData['age'])) {
            $user->setAge($updateData['age']);
        }
        if (isset($updateData['gender'])) {
            $user->setGender($updateData['gender']);
        }

        $this->userRepository->update($user);
        return $user;
    }

    /**
     * Change user password
     */
    public function changePassword(int $userId, string $currentPassword, string $newPassword): bool
    {
        $user = $this->userRepository->findById($userId);
        if (!$user || !password_verify($currentPassword, $user->getPassword())) {
            throw new InvalidArgumentException("Current password is invalid");
        }

        $user->setPassword(password_hash($newPassword, PASSWORD_BCRYPT));
        return $this->userRepository->update($user);
    }


    private function validateUserData(array $data): void
    {
        $required = ['email', 'first_name', 'last_name', 'password'];
        foreach ($required as $field) {
            if (empty($data[$field])) {
                throw new InvalidArgumentException("Missing required field: $field");
            }
        }

        if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {
            throw new InvalidArgumentException("Invalid email format");
        }

        if (strlen($data['password']) < 8) {
            throw new InvalidArgumentException("Password must be at least 8 characters");
        }
    }

    private function validateProfileData(array $data): void
    {
        if (isset($data['email'])) {
            throw new InvalidArgumentException("Email cannot be changed through this method");
        }
    }
}
?>